// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021010 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
namespace Proto {
class Data;
struct DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Matrix;
struct MatrixDefaultTypeInternal;
extern MatrixDefaultTypeInternal _Matrix_default_instance_;
class Row;
struct RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::Data* Arena::CreateMaybeMessage<::Proto::Data>(Arena*);
template<> ::Proto::Matrix* Arena::CreateMaybeMessage<::Proto::Matrix>(Arena*);
template<> ::Proto::Row* Arena::CreateMaybeMessage<::Proto::Row>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

// ===================================================================

class Row final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Row) */ {
 public:
  inline Row() : Row(nullptr) {}
  ~Row() override;
  explicit PROTOBUF_CONSTEXPR Row(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Row(const Row& from);
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Row& operator=(Row&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Row& default_instance() {
    return *internal_default_instance();
  }
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Row* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Row* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Row>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Row& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Row& from) {
    Row::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Row* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Row";
  }
  protected:
  explicit Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated string arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  const std::string& arr(int index) const;
  std::string* mutable_arr(int index);
  void set_arr(int index, const std::string& value);
  void set_arr(int index, std::string&& value);
  void set_arr(int index, const char* value);
  void set_arr(int index, const char* value, size_t size);
  std::string* add_arr();
  void add_arr(const std::string& value);
  void add_arr(std::string&& value);
  void add_arr(const char* value);
  void add_arr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_arr();
  private:
  const std::string& _internal_arr(int index) const;
  std::string* _internal_add_arr();
  public:

  // @@protoc_insertion_point(class_scope:Proto.Row)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> arr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Matrix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Matrix) */ {
 public:
  inline Matrix() : Matrix(nullptr) {}
  ~Matrix() override;
  explicit PROTOBUF_CONSTEXPR Matrix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Matrix(const Matrix& from);
  Matrix(Matrix&& from) noexcept
    : Matrix() {
    *this = ::std::move(from);
  }

  inline Matrix& operator=(const Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix& operator=(Matrix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Matrix& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matrix* internal_default_instance() {
    return reinterpret_cast<const Matrix*>(
               &_Matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Matrix& a, Matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Matrix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Matrix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Matrix& from) {
    Matrix::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Matrix";
  }
  protected:
  explicit Matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 1,
  };
  // repeated .Proto.Row rows = 1;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::Proto::Row* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Row >*
      mutable_rows();
  private:
  const ::Proto::Row& _internal_rows(int index) const;
  ::Proto::Row* _internal_add_rows();
  public:
  const ::Proto::Row& rows(int index) const;
  ::Proto::Row* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Row >&
      rows() const;

  // @@protoc_insertion_point(class_scope:Proto.Matrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Row > rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  ~Data() override;
  explicit PROTOBUF_CONSTEXPR Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Data& from) {
    Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Data";
  }
  protected:
  explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarixFieldNumber = 1,
    kActionIdFieldNumber = 2,
    kTypeIdFieldNumber = 3,
  };
  // .Proto.Matrix marix = 1;
  bool has_marix() const;
  private:
  bool _internal_has_marix() const;
  public:
  void clear_marix();
  const ::Proto::Matrix& marix() const;
  PROTOBUF_NODISCARD ::Proto::Matrix* release_marix();
  ::Proto::Matrix* mutable_marix();
  void set_allocated_marix(::Proto::Matrix* marix);
  private:
  const ::Proto::Matrix& _internal_marix() const;
  ::Proto::Matrix* _internal_mutable_marix();
  public:
  void unsafe_arena_set_allocated_marix(
      ::Proto::Matrix* marix);
  ::Proto::Matrix* unsafe_arena_release_marix();

  // int32 action_id = 2;
  void clear_action_id();
  int32_t action_id() const;
  void set_action_id(int32_t value);
  private:
  int32_t _internal_action_id() const;
  void _internal_set_action_id(int32_t value);
  public:

  // int32 type_id = 3;
  void clear_type_id();
  int32_t type_id() const;
  void set_type_id(int32_t value);
  private:
  int32_t _internal_type_id() const;
  void _internal_set_type_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Proto::Matrix* marix_;
    int32_t action_id_;
    int32_t type_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Row

// repeated string arr = 1;
inline int Row::_internal_arr_size() const {
  return _impl_.arr_.size();
}
inline int Row::arr_size() const {
  return _internal_arr_size();
}
inline void Row::clear_arr() {
  _impl_.arr_.Clear();
}
inline std::string* Row::add_arr() {
  std::string* _s = _internal_add_arr();
  // @@protoc_insertion_point(field_add_mutable:Proto.Row.arr)
  return _s;
}
inline const std::string& Row::_internal_arr(int index) const {
  return _impl_.arr_.Get(index);
}
inline const std::string& Row::arr(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Row.arr)
  return _internal_arr(index);
}
inline std::string* Row::mutable_arr(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Row.arr)
  return _impl_.arr_.Mutable(index);
}
inline void Row::set_arr(int index, const std::string& value) {
  _impl_.arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Proto.Row.arr)
}
inline void Row::set_arr(int index, std::string&& value) {
  _impl_.arr_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Proto.Row.arr)
}
inline void Row::set_arr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Proto.Row.arr)
}
inline void Row::set_arr(int index, const char* value, size_t size) {
  _impl_.arr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Proto.Row.arr)
}
inline std::string* Row::_internal_add_arr() {
  return _impl_.arr_.Add();
}
inline void Row::add_arr(const std::string& value) {
  _impl_.arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Proto.Row.arr)
}
inline void Row::add_arr(std::string&& value) {
  _impl_.arr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Proto.Row.arr)
}
inline void Row::add_arr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Proto.Row.arr)
}
inline void Row::add_arr(const char* value, size_t size) {
  _impl_.arr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Proto.Row.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Row::arr() const {
  // @@protoc_insertion_point(field_list:Proto.Row.arr)
  return _impl_.arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Row::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Row.arr)
  return &_impl_.arr_;
}

// -------------------------------------------------------------------

// Matrix

// repeated .Proto.Row rows = 1;
inline int Matrix::_internal_rows_size() const {
  return _impl_.rows_.size();
}
inline int Matrix::rows_size() const {
  return _internal_rows_size();
}
inline void Matrix::clear_rows() {
  _impl_.rows_.Clear();
}
inline ::Proto::Row* Matrix::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Matrix.rows)
  return _impl_.rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Row >*
Matrix::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Matrix.rows)
  return &_impl_.rows_;
}
inline const ::Proto::Row& Matrix::_internal_rows(int index) const {
  return _impl_.rows_.Get(index);
}
inline const ::Proto::Row& Matrix::rows(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Matrix.rows)
  return _internal_rows(index);
}
inline ::Proto::Row* Matrix::_internal_add_rows() {
  return _impl_.rows_.Add();
}
inline ::Proto::Row* Matrix::add_rows() {
  ::Proto::Row* _add = _internal_add_rows();
  // @@protoc_insertion_point(field_add:Proto.Matrix.rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Row >&
Matrix::rows() const {
  // @@protoc_insertion_point(field_list:Proto.Matrix.rows)
  return _impl_.rows_;
}

// -------------------------------------------------------------------

// Data

// .Proto.Matrix marix = 1;
inline bool Data::_internal_has_marix() const {
  return this != internal_default_instance() && _impl_.marix_ != nullptr;
}
inline bool Data::has_marix() const {
  return _internal_has_marix();
}
inline void Data::clear_marix() {
  if (GetArenaForAllocation() == nullptr && _impl_.marix_ != nullptr) {
    delete _impl_.marix_;
  }
  _impl_.marix_ = nullptr;
}
inline const ::Proto::Matrix& Data::_internal_marix() const {
  const ::Proto::Matrix* p = _impl_.marix_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Matrix&>(
      ::Proto::_Matrix_default_instance_);
}
inline const ::Proto::Matrix& Data::marix() const {
  // @@protoc_insertion_point(field_get:Proto.Data.marix)
  return _internal_marix();
}
inline void Data::unsafe_arena_set_allocated_marix(
    ::Proto::Matrix* marix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.marix_);
  }
  _impl_.marix_ = marix;
  if (marix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Data.marix)
}
inline ::Proto::Matrix* Data::release_marix() {
  
  ::Proto::Matrix* temp = _impl_.marix_;
  _impl_.marix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Proto::Matrix* Data::unsafe_arena_release_marix() {
  // @@protoc_insertion_point(field_release:Proto.Data.marix)
  
  ::Proto::Matrix* temp = _impl_.marix_;
  _impl_.marix_ = nullptr;
  return temp;
}
inline ::Proto::Matrix* Data::_internal_mutable_marix() {
  
  if (_impl_.marix_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Matrix>(GetArenaForAllocation());
    _impl_.marix_ = p;
  }
  return _impl_.marix_;
}
inline ::Proto::Matrix* Data::mutable_marix() {
  ::Proto::Matrix* _msg = _internal_mutable_marix();
  // @@protoc_insertion_point(field_mutable:Proto.Data.marix)
  return _msg;
}
inline void Data::set_allocated_marix(::Proto::Matrix* marix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.marix_;
  }
  if (marix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(marix);
    if (message_arena != submessage_arena) {
      marix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marix, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.marix_ = marix;
  // @@protoc_insertion_point(field_set_allocated:Proto.Data.marix)
}

// int32 action_id = 2;
inline void Data::clear_action_id() {
  _impl_.action_id_ = 0;
}
inline int32_t Data::_internal_action_id() const {
  return _impl_.action_id_;
}
inline int32_t Data::action_id() const {
  // @@protoc_insertion_point(field_get:Proto.Data.action_id)
  return _internal_action_id();
}
inline void Data::_internal_set_action_id(int32_t value) {
  
  _impl_.action_id_ = value;
}
inline void Data::set_action_id(int32_t value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:Proto.Data.action_id)
}

// int32 type_id = 3;
inline void Data::clear_type_id() {
  _impl_.type_id_ = 0;
}
inline int32_t Data::_internal_type_id() const {
  return _impl_.type_id_;
}
inline int32_t Data::type_id() const {
  // @@protoc_insertion_point(field_get:Proto.Data.type_id)
  return _internal_type_id();
}
inline void Data::_internal_set_type_id(int32_t value) {
  
  _impl_.type_id_ = value;
}
inline void Data::set_type_id(int32_t value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:Proto.Data.type_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
